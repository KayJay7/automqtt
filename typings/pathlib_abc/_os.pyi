"""
This type stub file was generated by pyright.
"""

import os
import fcntl
import posix
import _winapi
from errno import *

"""
Low-level OS functionality wrappers used by pathlib.
"""
if fcntl and hasattr(fcntl, "FICLONE"):
    ...
else:
    _ficlone = ...
if posix and hasattr(posix, "_fcopyfile"):
    ...
else:
    _fcopyfile = ...
if hasattr(os, "copy_file_range"):
    ...
else:
    _copy_file_range = ...
if hasattr(os, "sendfile"):
    ...
else:
    _sendfile = ...
if _winapi and hasattr(_winapi, "CopyFile2"):
    def copyfile2(source, target):  # -> None:
        """
        Copy from one file to another using CopyFile2 (Windows only).
        """
        ...

else:
    copyfile2 = ...

def copyfileobj(source_f, target_f):  # -> None:
    """
    Copy data from file-like object source_f to file-like object target_f.
    """
    ...

def magic_open(
    path, mode=..., buffering=..., encoding=..., errors=..., newline=...
):  # -> IO[Any] | Any | TextIOWrapper[Any]:
    """
    Open the file pointed to by this path and return a file object, as
    the built-in open() function does.
    """
    ...

def ensure_distinct_paths(source, target):  # -> None:
    """
    Raise OSError(EINVAL) if the other path is within this path.
    """
    ...

def ensure_different_files(source, target):  # -> None:
    """
    Raise OSError(EINVAL) if both paths refer to the same file.
    """
    ...

def copy_info(info, target, follow_symlinks=...):  # -> None:
    """Copy metadata from the given PathInfo to the given local path."""
    ...

class _PathInfoBase:
    __slots__ = ...
    def __init__(self, path) -> None: ...
    def __repr__(self) -> str: ...

    if hasattr(os.stat_result, "st_flags"):
        ...
    if hasattr(os, "listxattr"):
        ...

class _WindowsPathInfo(_PathInfoBase):
    """Implementation of pathlib.types.PathInfo that provides status
    information for Windows paths. Don't try to construct it yourself."""

    __slots__ = ...

    def exists(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path exists."""
        ...

    def is_dir(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a directory."""
        ...

    def is_file(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a regular file."""
        ...

    def is_symlink(self) -> bool:
        """Whether this path is a symbolic link."""
        ...

class _PosixPathInfo(_PathInfoBase):
    """Implementation of pathlib.types.PathInfo that provides status
    information for POSIX paths. Don't try to construct it yourself."""

    __slots__ = ...

    def exists(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path exists."""
        ...

    def is_dir(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a directory."""
        ...

    def is_file(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a regular file."""
        ...

    def is_symlink(self) -> bool:
        """Whether this path is a symbolic link."""
        ...

PathInfo = ...

class DirEntryInfo(_PathInfoBase):
    """Implementation of pathlib.types.PathInfo that provides status
    information by querying a wrapped os.DirEntry object. Don't try to
    construct it yourself."""

    __slots__ = ...
    def __init__(self, entry) -> None: ...
    def exists(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path exists."""
        ...

    def is_dir(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a directory."""
        ...

    def is_file(self, *, follow_symlinks: bool = ...) -> bool:
        """Whether this path is a regular file."""
        ...

    def is_symlink(self) -> bool:
        """Whether this path is a symbolic link."""
        ...
